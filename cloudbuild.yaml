# Build runtime of 20 minutes
timeout: '1200s'

steps:
  # 1. Build the container image using the cache from the 'latest' tag
  - name: 'gcr.io/cloud-builders/docker'
    id: Build
    args:
      - 'build'
      - '--tag'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/promise-tracker/promise-tracker-pipeline:$COMMIT_SHA'
      - '--tag'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/promise-tracker/promise-tracker-pipeline:latest' # Tag as latest
      - '--cache-from'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/promise-tracker/promise-tracker-pipeline:latest'
      - '.'

  # 2. Push the images to Artifact Registry.
  #    This step is now handled automatically by the `images` list below.
  #    We only need one push for both tags.
  - name: 'gcr.io/cloud-builders/docker'
    id: Push
    args:
      - 'push'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/promise-tracker/promise-tracker-pipeline'
      - '--all-tags' # Pushes both the commit SHA tag and the 'latest' tag

  # 3. Deploy the new container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'promise-tracker-pipeline'
      - '--image'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/promise-tracker/promise-tracker-pipeline:$COMMIT_SHA'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--timeout'
      - '3600'
      - '--concurrency'
      - '10'
      - '--max-instances'
      - '5'
      - '--set-env-vars'
      - 'PYTHONPATH=/app,ENVIRONMENT=production,BUILD_SHA=$COMMIT_SHA'

  # 4. Verify the deployment with a health check
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Verify
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$$(gcloud run services describe promise-tracker-pipeline --platform managed --region us-central1 --format 'value(status.url)')
        echo "üöÄ Deployment successful!"
        echo "üåê Service URL: $$SERVICE_URL"
        echo "üè∑Ô∏è  Git SHA: $COMMIT_SHA"
        echo "üì¶ Image: us-central1-docker.pkg.dev/$PROJECT_ID/promise-tracker/promise-tracker-pipeline:$COMMIT_SHA"
        
        # Test the health endpoint
        curl -f "$$SERVICE_URL/" || exit 1
        echo "‚úÖ Health check passed"

# Specify the images to push to Artifact Registry after a successful build.
# This is the idiomatic Cloud Build way and simplifies the steps above.
# Note: I removed this since the explicit push step is clearer with the multi-tag setup.
# The explicit push with --all-tags is now the recommended approach here.

# Configure the build machine and logging
options:
  machineType: 'E2_HIGHCPU_8'
  # defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET # This is good, but often default. Keep if you need it.