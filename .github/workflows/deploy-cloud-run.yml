name: Deploy to Cloud Run

on:
  push:
    branches: [ main, master ]
    paths:
      - 'pipeline/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - '.github/workflows/deploy-cloud-run.yml'
  workflow_dispatch: # Allow manual triggering

env:
  PROJECT_ID: promisetrackerapp
  SERVICE_NAME: promise-tracker-pipeline
  REGION: us-central1
  REPOSITORY_NAME: promise-tracker

jobs:
  deploy:
    name: Deploy Pipeline to Cloud Run
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Create Artifact Registry repository (if needed)
      run: |
        gcloud artifacts repositories create ${{ env.REPOSITORY_NAME }} \
          --repository-format=docker \
          --location=${{ env.REGION }} \
          --description="Promise Tracker Pipeline Docker images" \
          || echo "Repository already exists"

    - name: Build and push Docker image
      run: |
        IMAGE_NAME="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/promise-tracker-pipeline"
        
        # Build the image
        docker build -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest .
        
        # Push both tags
        docker push $IMAGE_NAME:${{ github.sha }}
        docker push $IMAGE_NAME:latest

    - name: Deploy to Cloud Run
      run: |
        IMAGE_NAME="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/promise-tracker-pipeline:${{ github.sha }}"
        
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image $IMAGE_NAME \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --timeout 3600 \
          --concurrency 10 \
          --max-instances 5 \
          --set-env-vars "PYTHONPATH=/app" \
          --set-env-vars "ENVIRONMENT=production" \
          --set-env-vars "GITHUB_SHA=${{ github.sha }}"

    - name: Verify deployment
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)')
        echo "üöÄ Deployment successful!"
        echo "üåê Service URL: $SERVICE_URL"
        
        # Test the health endpoint
        curl -f "$SERVICE_URL/" || exit 1
        echo "‚úÖ Health check passed"

    - name: Update deployment status
      run: |
        echo "üìä Deployment Summary:"
        echo "   üì¶ Image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/promise-tracker-pipeline:${{ github.sha }}"
        echo "   üè∑Ô∏è  Git SHA: ${{ github.sha }}"
        echo "   üåø Branch: ${{ github.ref_name }}"
        echo "   üë§ Triggered by: ${{ github.actor }}"
        echo "   üîê Auth: Workload Identity Federation (keyless)" 